// 타입 종류

// 문자
// 숫자
// 불린
// Null / Undefined
// 배열
// 객체
// 함수
// Any
// Unknown
// Tuple
// Void
// Never
// Union
// Intersection


// 문자

let str: string; // undefined, 그러나 str에는 추후에 반드시 string 데이터만 들어갈 수 있다.
let red: string = "Red";
let green: string = "Green";
let myColor: string = `My color is ${red}`;
let yourColor: string = "Your color is " + green;

// 숫자
let num: number;
let integer: number = 6;
let float: number = 3.14;
let infinity: number = Infinity;
let nan: number = NaN;

// 불린
let isBoolean: boolean;
let isDone: boolean = false;

// Null / Undefined - null과 undefined를 지정해서 쓰는 일은 거의 없다. 지정이 가능하다는 정도만 알면 된다.
let nul: null = null;
let und: undefined = undefined;

// 배열
const fruits: string[] = ["Apple", "Banana", "Cherry"];
const numbers: number[] = [1, 2, 3, 4, 5, 6, 7];
const union: (string | number)[] = ["Apple", 1, 2, "Banana", 3];
console.log(fruits); // ["Apple", "Banana", "Cherry"]
console.log(numbers); // [1, 2, 3, 4, 5, 6, 7]
console.log(union); // ["Apple", 1, 2, "Banana", 3]

// 객체
// typeof DATA = 'object'
// object 타입은 객체데이터, 배열데이터, 함수데이터 모두 가능하여 잘 사용하지 않음.
const obj: object = {};
const arr: object = [];
const func: object = function () {};

// 객체데이터의 type을 interface로 지정할 수 있다.
interface User {
  name: string;
  age: number;
  isValid: boolean;
}
const userA: User = {
  name: "Heropy",
  age: 85,
  isValid: true,
};
const userB: User = {
  name: "Heropy",
  age: 85,
  isValid: true,
};

// 함수
const add: (x: number, y: number) => number = function (x, y) {
  return x + y;
};
let a: number = add(1, 2);
const add2 = function (x: number, y: number): number {
  return x + y;
};
a = add2(1, 2);

const hello: () => void = function () {
  console.log("Hello world~");
};
let h: void = hello();
const hello2 = function (): void {
  console.log("Hello world~");
};
h = hello2();
