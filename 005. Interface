// 인터페이스 (Interface)

// 선택적 속성 - ?
// 읽기전용 속성 - readonly

interface User {
  name: string;
  readonly age: number;
  isValid?: boolean; // 선택적 속성, isValid가 있어도 되고 없어도 된다.
}

const jsc: User = {
  name: "조성창",
  age: 41,
  isValid: true,
};
jsc.isValid = false; // 새로운 값 할당 가능.
jsc.age = 22; // readonly 속성에는 값을 할당할 수 없다.

const neo: User = {
  name: "Neo",
  age: 102,
};

// 함수 타입 - 호출 시그니처(Call Signature)
// 인덱스 가능 타입 - 인덱스 시그니처(Index Signrature)
// 확장(상속)

// 함수 타입
// interface GetName {
//   (param: string): string // param은 아무 이름이나 작성해도 됨.
// }

// interface User {
//   name: string;
//   age: number;
//   getName: GetName;
// }

interface User {
  name: string
  age: number
  getName: (param: string) => string // param은 아무 이름이나 작성해도 됨.
}

const jsc: User = {
  name: "Seongchang",
  age: 41,
  getName(message: string) { // 매개변수의 이름은 interface와 달라도 됨. type과 개수만 맞으면 된다.
    console.log(message);
    return this.name;
  },
};
jsc.getName("Hello~");


// 인덱스 가능 타입 - 인덱스 시그니처(Index Signrature)

// 배열
interface Fruits {
  [item: number]: string;
}
const fruits: Fruits = ["Apple", "Banana", "Cherry"];
console.log(fruits[1]); // Banana

// 객체
interface User {
  [key: string]: unknown; // key대신 아무 이름이나 입력 가능.
  name: string;
  age: number;
}
const jsc: User = {
  name: "Seongchang",
  age: 41,
};
jsc["isValid"] = true;
jsc["email"] = ["seodong56@nate.com", "belief56@gmail.com"];
console.log(jsc);
