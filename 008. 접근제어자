// 클래스

// 접근 제어자(Access Modifiers)
// public - 어디서나 자유롭게 접근 가능, 클래스 바디에서 생략 가능
// protected - 나와 파생된 후손 클래스 내에서 접근 가능
// private - 내 클래스에서만 접근 가능

class UserA {
  public first: string = "a"; // 할당연산자(=)를 통해 초기화도 가능
  last: string; // 안쓰면 public임.
  protected age: number;

  constructor(first: string, last: string, age: number) {
    this.first = first;
    this.last = last;
    this.age = age;
  }

  getAge() {
    return `${this.first} ${this.last} is ${this.age}`;
  }
}
class UserB extends UserA {
  protected getAge() { // 메소드 앞에 접근제어자 사용 가능
    return `${this.first} ${this.last} is ${this.age}`;
  }
}
class UserC extends UserB {
  getAge() {
    return `${this.first} ${this.last} is ${this.age}`;
  }
}

const neo = new UserA("Neo", "Anderson", 102);
console.log(neo.first);
console.log(neo.last);
console.log(neo.age); // 접근불가 - protected 이므로
