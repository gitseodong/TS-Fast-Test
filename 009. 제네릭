// 제네릭(Generic)
// 함수

interface Obj {
  x: number;
}
type Arr = [number, number];

function toArray(a: string, b: string): string[];
function toArray(a: number, b: number): number[];
function toArray(a: boolean, b: boolean): boolean[];
function toArray(a: Obj, b: Obj): Obj[];
function toArray(a: Arr, b: Arr): Arr[];
function toArray(a: any, b: any) {
  return [a, b];
}

console.log(
  toArray("Neo", "Anderson"),
  toArray(1, 2),
  toArray(true, false),
  toArray({ x: 1 }, { x: 2 }),
  toArray([1, 2], [3, 4])
);

// 위의 오버로딩된 함수를 아래와 같이 제네릭으로 변경가능.
interface Obj {
  x: number;
}
type Arr = [number, number];

function toArray<T>(a: T, b: T) { // 꼭 T로 할 필요는 없다. 임의의 이름으로 해도 됨.
  return [a, b];
}

console.log(
  toArray<string>("Neo", "Anderson"),
  toArray(1, 2), // <> 안에 type을 지정하지 않아도 사용가능
  toArray(true, false),
  toArray<Obj>({ x: 1 }, { x: 2 }),
  toArray([1, 2], [3, 4, 5]), // 둘 다 배열이므로 오류없음.
  toArray<Arr>([1, 2], [3, 4, 5]) // 위에서 지정한 tuple 타입이 아니므로 오류남.
);

// 클래스

class User<P> {
  constructor(public payload: P) {}
  getPayload() {
    return this.payload;
  }
}

interface UserAType {
  name: string;
  age: number;
  isValid: boolean;
}

interface UserBType {
  name: string;
  age: number;
  emails: string[];
}

const jsc = new User<UserAType>({
  name: "jsc",
  age: 41,
  isValid: true,
});

const neo = new User<UserBType>({
  name: "Neo",
  emails: ["neo@gamil.com"],
  age: 50,
});
