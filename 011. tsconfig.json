// 설명은 하단부에
// root에 tsconfig.json파일 생성하면 됨.
// tsconfig.json의 가장 중요한 옵션들

{
  "compilerOptions": {
    "target": "ES2015",
    "module": "ESNext",
    "moduleResolution": "Node",
    "esModuleInterop": true,
    "isolatedModules": true,
    "lib": ["ESNext", "DOM"],
    "strict": true
  },
  "include": ["src/**/*.ts"],
  "exclude": ["node_moudles"]
}


// 크게 3가지 옵션이 있음 : compilerOptions, include, exclude
// compilerOptions: 만들어진 ts코드를 js로 변환하기 위해 필요한 세부사항.

{
  //컴파일러 옵션 지정
  "compilerOptions": {
    // 컴파일될 ES(JS) 버전 명시 - "ES2015" 권장, "ES3"(기본값)
    "target": "ES2015",
    // 모듈 시스템 지정- "CommonJS"(기본값), "AMD", "EXNext"
    // EXNext : import형식, 웹브라우저,  CommonJS: require형식, node.js
    "module": "ESNext",
    // 모듈 해석 방식 지정 - "Node"(기본값), "Classic"
    // Node: import시 js, ts확장자 생략 가능, index 생략 가능
    "moduleResolution": "Node",
    // ESM 모듈 방식 호환성 활성화 여부, false(기본값), true
    // ESM = ESNext
    // false로 설정시 commonJS방식으로 내보내기 된 것을 import해올 때 import * as abc from './commmon' 과 같은 방식을 써주어야 함.
    // commonJS방식은 default 내보내기가 불가능하기 때문이다.
    // true로 설정시 commonJS방식으로 내보내기 된 것도 import abc from './common' 과 같이 ESM 방식으로 불러올 수 있다.
    "esModuleInterop": false,
    // 모든 파일을 모듈로 컴파일, import 혹은 export 키워드 필수
    // true, false(기본값)
    // true설정시 모든 파일에 import 또는 export 키워드가 있어야 함. 빈 파일에도 오류남.
    "isolatedModules": true,
    // 모듈 해석에 사용할 기준 경로 지정
    // tsconfig.json파일이 폴더 안에 있다면 "../"라고 하면 된다.
    "baseUrl": "./",
    // 컴파일러가 참조할 타입 선언(d.ts)의 경로를 지정
    "typeRoots": ["./node_modules/@types"],
    // 컴파일에서 사용하라 라이브러리 지정 - "ESNext", "DOM"
    "lib": ["ESNext", "DOM"],
    // 더 엄격한 타입 검색 활성화, false(기본값)
    // false 설정시 ts의 중요한 장점이 사라지므로 true 설정 권장
    // "strict"만 true로 설정하면, 하단의 모든 세부strict가 true로 바뀜.
    "strict": true,
    // 암시적 any 타입 검사 활성화
    "noImplicitAny": false,
    // 암시적 this 타입 검사 활성화
    "noImplicitThis": false,
    // 엄격한 Nullish 타입 검사 활성화
    "strictNullChecks": false,
    // 엄격한 함수의 매개변수 타입 검사 활성화
    "strictFunctionTypes": false,
    // 엄격한 클래스의 속성 초기화 검사 활성화
    "strictPropertyInitialization": false,
    // 엄격한 Bind, Call, Apply 메소드의 인수 검사 활성화
    "strictBindCallApply": false
  },
  // include : 컴파일할 경로 목록, 배열 안에 여러개 입력 가능
  "include": ["src/**/*.ts", "api/**/*.ts"],
  // exclude : 컴파일에서 제외할 파일 경로 목록
  "exclude": ["node_moudles"]
}
